public class Account 
{
    public int ID;
    public int curBal;
    public int getID() 
    {
        return ID;
    }

    public int getBal() 
    {
        return curBal;
    }
    public Account(int ID, int balance) 
    {
        this.curBal = balance;
        this.ID = ID;
    }
    public boolean deposit(double coins)
    {
        curBal += coins;
        return true;
    }
    public void withdraw(int amount) throws InsufficientFundsException 
    {
        if (curBal >= amount) 
        {
            curBal = curBal - amount;
        } 
        else 
        {
            throw new InsufficientFundsException("Insufficient funds.");
        }
    }
}

import java.util.ArrayList;

public class Bank 
{
	public static ArrayList<Account> accounts = new ArrayList<>();=
	public int bal = 0;
	public int ID;
    public void accountNew(int ID, int initBal) 
    {
        accounts.add(new Account(ID, initBal));
        ID += 1;
    }
    public Account getAccount(int index) 
    { 
        return accounts.get(index);
    }
    public ArrayList<Account> getAcc() 
    {
        return accounts;
    }
    public int size()
    {
        int size = accounts.size();
        return size;
    }
    public int coinTotal() {
        for(Account account: accounts) 
        {
            bal += account.getBal();
        }
        return bal;
    }
    public int getID() 
    {
        return ID;
    }
    public void transfer(Account from, Account to, int amount) throws InsufficientFundsException 
    {
    	try
    	{
    		from.withdraw(amount);
    		to.deposit(amount);
    	}
    	catch (InsufficientFundsException e)
    	{
    		throw new InsufficientFundsException("Insufficient funds.");
    	}

    }
}

public class InsufficientFundsException extends Exception 
{
	public InsufficientFundsException(String msg) 
	{
        super(msg);
	}
}

import java.util.ArrayList;
import java.util.Random;

import static org.junit.Assert.*;

public class JUnit {
    @org.junit.Test
    public void transferTest() {
        Random random = new Random();
        Bank bank = new Bank();
        int totalTrack = bank.coinTotal();
        for (int i = 0; i < 300; i ++)
        {
;        	int randID = 0 + random.nextInt() * 100;
        	int randBal = 0 + random.nextInt() * 100;
            bank.accountNew(randID, randBal);
        }
        System.out.println(bank.getAcc());
        System.out.println(bank.coinTotal());
        ArrayList<Thread> threads = new ArrayList<>();

        for(int i = 0; i < 50 ; i++) 
        {
            int from = random.nextInt(bank.size());
            int to = random.nextInt(bank.size());
            int coins = 100;
            threads.add(new Thread(() -> 
            {
				try 
				{
					bank.transfer(bank.getAccount(from), bank.getAccount(to), coins);
				} 
				catch (InsufficientFundsException e) 
				{
					e.printStackTrace();
				}
			}));
        }
            for (Thread thread1 : threads) 
            {
                thread1.start();
            }
            for(Thread thread2 : threads)
            {
                if(thread2.isAlive()) 
                {
                        try 
                        {
							          thread2.join();
					            	} 
                        catch (InterruptedException e) 
                        {
							          e.printStackTrace();
					            	}
                }
            }
            int result = bank.coinTotal();
        assertEquals(totalTrack, result);
    }
} 
