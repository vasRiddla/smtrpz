import java.util.List;
import java.util.concurrent.*;
import java.util.ArrayList;

public class Carlos {
	public static void main(String[] args) {
	int iterations = 100000;
	int threads = 8;
        int sum = iterations/threads;
	ExecutorService executor = Executors.newFixedThreadPool(threads);
        List<Future<Integer>> list = new ArrayList<>();
        Callable<Integer> callable = new Carlo(sum);
	for (int i = 0; i < threads; i++) {
            Future<Integer> future = executor.submit(callable);
            list.add(future);
        }
        for (Future<Integer> future : list) {
                counter += future.get();
        }
        }
		long timerStart = System.nanoTime();
		System.out.println("PI is " + getPi(1000000000));
		System.out.println("THREADS " + threads);
		System.out.println("ITERATIONS 1,000,000,000");
		long timerEnd = System.nanoTime();
        long totalTime = (timerEnd - timerStart);
		System.out.println("TIME: " + totalTime/1000000);
	}
}



public class Carlo implements Callable<Integer> {
    }
    @Override
	public static double getPi(int numThrows){
		int inCircle= 0;
		for(int i= 0;i < numThrows;i++){
			double randX= (Math.random() * 2) - 1;
			double randY= (Math.random() * 2) - 1;
			double dist= Math.sqrt(randX * randX + randY * randY);
			if(dist < 1){
				inCircle++;
			}
		}
		return (4.0 * inCircle) / numThrows;
}
